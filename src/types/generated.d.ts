/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Health Check */
    get: operations['retrieveApiHealth']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * User login
     * @description Logs user in to the system
     */
    post: operations['login']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * User logout
     * @description Logs user out of the system
     */
    post: operations['logout']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/password:request-reset': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Request reset of password for user
     * @description Request reset of password for user
     */
    post: operations['requestResetPassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/password:reset': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Reset password for the user
     * @description Reset password for the user
     */
    post: operations['resetPassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload-signature': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve upload signature
     * @description Retrieve the upload signature
     */
    get: operations['retrieveUploadSignature']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Current user
     * @description Get the information about the currently logged-in user
     */
    get: operations['me']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/users/{userGroup}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve users
     * @description The response will be based on the role of logged-in user
     */
    get: operations['retrieveUsers']
    put?: never
    /**
     * Creates a user
     * @description Creates a user in the system. Only SUPER_ADMIN & MERCHANT_ADMIN are allowed to do this operation.
     */
    post: operations['createUser']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/users/{userGroup}/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve user
     * @description Get the user information.
     */
    get: operations['retrieveUser']
    /**
     * Updates a user
     * @description Updates the user information
     */
    put: operations['updateUser']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/users/{userGroup}/{userId}:activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Activates a user
     * @description Removes the access of a user
     */
    post: operations['activateUser']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/users/{userGroup}/{userId}:resend-welcome-email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resend welcome email to user
     * @description Resend welcome email to user
     */
    post: operations['resendUserWelcomeEmail']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/users/{userGroup}/{userId}:deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deactivates a user
     * @description Removes the access of a user
     */
    delete: operations['deactivateUser']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve merchants
     * @description The response will be based on the role of logged-in user
     */
    get: operations['retrieveMerchants']
    put?: never
    /**
     * Creates a merchant
     * @description Creates a merchant in the system. Only SUPER_ADMIN & MERCHANT_ADMIN are allowed to do this operation.
     */
    post: operations['createMerchant']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves a merchant
     * @description Retrieves the merchant information
     */
    get: operations['retrieveMerchant']
    /**
     * Updates a merchant
     * @description Updates the merchant information
     */
    put: operations['updateMerchant']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}:deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deactivates a merchant
     * @description Removes the access of the merchant to the system
     */
    delete: operations['deactivateMerchant']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}:activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Activates a merchant
     * @description Gives access of the merchant to the system
     */
    post: operations['activateMerchant']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}:resend-welcome-email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resends welcome email to merchant
     * @description Resends welcome email to merchant
     */
    post: operations['resendMerchantWelcomeEmail']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/operators': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves a list of operators for a merchant
     * @description Retrieves a list of operators for a merchant
     */
    get: operations['retrieveMerchantOperators']
    put?: never
    /**
     * Creating user as operator for a merchant
     * @description Creating a user as an operator for a merchant
     */
    post: operations['createMerchantOperator']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/operators/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve merchant operator
     * @description Retrieve merchant operator
     */
    get: operations['retrieveMerchantOperator']
    /**
     * Update merchant operator
     * @description Update merchant operator
     */
    put: operations['updateMerchantOperator']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/operators/{userId}:deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deactivating operator of a merchant
     * @description Deactivates operator of a merchant
     */
    delete: operations['deactivateMerchantOperator']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/operators/{userId}:activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Activating operator of a merchant
     * @description Activates operator of a merchant
     */
    post: operations['activateMerchantOperator']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/subscriptions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve merchant subscriptions
     * @description Retrieves the subscriptions of a merchant including all statuses
     */
    get: operations['retrieveMerchantSubscriptions']
    put?: never
    /**
     * Create merchant subscription
     * @description Creates a subscription of a merchant
     */
    post: operations['createMerchantSubscription']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/subscriptions/{subscriptionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve merchant subscription
     * @description Retrieve a subscription of a merchant
     */
    get: operations['retrieveMerchantSubscription']
    /**
     * Update merchant subscription
     * @description Updates a subscription of a merchant
     */
    put: operations['updateMerchantSubscription']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/subscriptions/{subscriptionId}:deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deactivates a merchant subscription
     * @description Deactivates a merchant subscription
     */
    delete: operations['deactivateMerchantSubscription']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/subscriptions/{subscriptionId}:activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Activates a merchant subscription
     * @description Activates a merchant subscription
     */
    post: operations['activateMerchantSubscription']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/rewards': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve merchants rewards */
    get: operations['retrieveMerchantRewards']
    put?: never
    /** Create merchant reward */
    post: operations['createMerchantReward']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/rewards/{rewardId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve merchant reward */
    get: operations['retrieveMerchantReward']
    /** Update merchant reward */
    put: operations['updateMerchantReward']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/rewards/{rewardId}:deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Deactivates a merchant reward */
    delete: operations['deactivateMerchantReward']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/rewards/{rewardId}:activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Activates a merchant reward */
    post: operations['activateMerchantReward']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/transactions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve merchant transaction
     * @description Retrieve merchant transaction
     */
    get: operations['retrieveMerchantTransactions']
    put?: never
    /**
     * Creates a transaction
     * @description Creates a transaction between merchant and customer
     */
    post: operations['createMerchantTransaction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/transactions/{transactionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves a transaction
     * @description Retrieves a transaction details
     */
    get: operations['retrieveMerchantTransaction']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/transactions/{transactionId}:void': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Void a transaction
     * @description Void a transaction
     */
    post: operations['voidMerchantTransaction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/redemptions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve merchant redemptions
     * @description Retrieve merchant redemptions
     */
    get: operations['retrieveMerchantRedemptions']
    put?: never
    /**
     * Redemption of customer rewards
     * @description Redemption customer rewards for a specific merchant
     */
    post: operations['redeemCustomerReward']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/redemptions/{redemptionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves a redemption
     * @description Retrieves a merchant redemption details
     */
    get: operations['retrieveMerchantRedemption']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/customers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve customers list for a merchant
     * @description Retrieve customers list for a merchant
     */
    get: operations['retrieveMerchantCustomers']
    put?: never
    /**
     * Create customer initiated by merchant
     * @description Create customer initiated by merchant
     */
    post: operations['createMerchantCustomer']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/customers/{customerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve customer and reward info
     * @description Retrieve customer and reward info
     */
    get: operations['retrieveMerchantCustomer']
    /**
     * Update customer initiated by merchant
     * @description Update customer initiated by merchant
     */
    put: operations['updateMerchantCustomer']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/merchants/{merchantId}/statistics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve merchant statistics
     * @description Retrieve merchant statistics
     */
    get: operations['retrieveMerchantStatistics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/subscriptions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve all subscriptions
     * @description Retrieve all subscriptions
     */
    get: operations['retrieveSubscriptions']
    put?: never
    /**
     * Create a subscription for a merchant
     * @description Creates a subscription for a merchant
     */
    post: operations['createSubscription']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/subscriptions/{subscriptionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * All subscriptions
     * @description Retrieve a subscription
     */
    get: operations['retrieveSubscription']
    /**
     * Update subscription
     * @description Updates a subscription
     */
    put: operations['updateSubscription']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/subscriptions/{subscriptionId}:deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deactivates a subscription
     * @description Deactivates a subscription
     */
    delete: operations['deactivateSubscription']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/subscriptions/{subscriptionId}:activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Activates a subscription
     * @description Activates a subscription
     */
    post: operations['activateSubscription']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/rewards': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve merchants rewards */
    get: operations['retrieveRewards']
    put?: never
    /** Create reward */
    post: operations['createReward']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/rewards/{rewardId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve reward */
    get: operations['retrieveReward']
    /** Update reward */
    put: operations['updateReward']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/rewards/{rewardId}:deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Deactivates a reward */
    delete: operations['deactivateReward']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/rewards/{rewardId}:activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Activates a reward */
    post: operations['activateReward']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/transactions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve all transaction
     * @description Retrieve all transactions
     */
    get: operations['retrieveTransactions']
    put?: never
    /**
     * Creates a transaction
     * @description Admin initiated creation of transaction
     */
    post: operations['createTransaction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/transactions/{transactionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves a transaction
     * @description Retrieves a transaction details
     */
    get: operations['retrieveTransaction']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/transactions/{transactionId}:void': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Void a transaction
     * @description Void a transaction
     */
    post: operations['voidTransaction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/redemptions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve redemptions
     * @description Retrieve redemptions
     */
    get: operations['retrieveRedemptions']
    put?: never
    /**
     * Redemption of rewards
     * @description Redemption of rewards
     */
    post: operations['redeemReward']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/redemptions/{redemptionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves a redemption
     * @description Retrieves a redemption details
     */
    get: operations['retrieveRedemption']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/statistics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve statistics
     * @description Retrieve statistics
     */
    get: operations['retrieveStatistics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/posts/published': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves published posts
     * @description Retrieves published posts
     */
    get: operations['retrievePublishedPosts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/posts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves the list of posts
     * @description Retrieves the list of posts
     */
    get: operations['retrievePosts']
    put?: never
    /**
     * Create a post
     * @description Create a post
     */
    post: operations['createPost']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/posts/{postIdOrSlug}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve a post
     * @description Retrieve a post
     */
    get: operations['retrievePost']
    /**
     * Update a post
     * @description Update a post
     */
    put: operations['updatePost']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/posts/{postIdOrSlug}:publish': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Publish a post
     * @description Publish a post
     */
    post: operations['publishPost']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/posts/{postIdOrSlug}:unpublish': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Unpublish a post
     * @description Unpublish a post
     */
    delete: operations['unPublishPost']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Post: {
      id: components['schemas']['Id']
      status: components['schemas']['PostStatus']
      createdBy?: string
      createdDate?: string
      publishedDate?: string
      lastModifiedDate?: string
    } & WithRequired<
      components['schemas']['PostRequest'],
      'title' | 'description' | 'slug' | 'summary' | 'content' | 'tags'
    >
    PostsList: {
      items: components['schemas']['Post'][]
      paging: components['schemas']['Paging']
    }
    PostRequest: {
      /** @description will be used at meta title */
      title: string
      /** @description will be used at meta description */
      description?: string
      /** @description auto-generated slug from post title */
      slug?: string
      summary: string
      /** @description content in html format */
      content: string
      /** @description comma-seperated value of tags */
      tags: string
    }
    /** @enum {string} */
    PostStatus: 'DRAFT' | 'PUBLISHED' | 'UNPUBLISHED'
    /**
     * @default admin
     * @enum {string}
     */
    RequestedFrom: 'OPERATOR' | 'ADMIN'
    AuthToken: {
      accessToken: string
      refreshToken: string
      /** Format: int64 */
      expiration: number
      /** @example Bearer */
      type: string
    }
    User: {
      id: components['schemas']['Id']
    } & WithRequired<components['schemas']['UserRequest'], 'email'>
    UserRequest: {
      email?: components['schemas']['Email']
      /** @example John */
      firstName: string
      /** @example Smith */
      lastName: string
      mobile?: components['schemas']['PhoneNumber']
      /**
       * Format: date
       * @deprecated
       * @example 2024-05-24
       */
      dateOfBirth?: string
      gender?: components['schemas']['Gender']
      ageRange?: components['schemas']['AgeRange']
      birthMonth?: components['schemas']['BirthMonth']
      rewardType?: components['schemas']['RewardType']
      role?: components['schemas']['Role']
      status?: components['schemas']['Status']
      merchantId?: components['schemas']['Id']
    }
    UserCreateOrUpdateRequest: {
      password?: components['schemas']['Password']
    } & components['schemas']['UserRequest']
    UsersList: {
      items: components['schemas']['User'][]
      paging: components['schemas']['Paging']
    }
    /** @example ********* */
    Password: string
    Merchant: {
      id: components['schemas']['Id']
      status: components['schemas']['Status']
      activeSubscription?: components['schemas']['Plan']
      activeRewards?: number
      numOfCustomers?: number
      logoUrl?: string
    } & WithRequired<
      components['schemas']['MerchantRequest'],
      'name' | 'address' | 'email' | 'mobile'
    >
    MerchantRequest: {
      /** @example Potato Corner */
      name: string
      email: components['schemas']['Email']
      mobile: components['schemas']['PhoneNumber']
      phone?: string
      pointBasis?: components['schemas']['PointBasis']
      /**
       * @description Equivalent of 1 point for this reward
       * @default 50
       */
      basePoint: components['schemas']['Amount']
      currency: components['schemas']['Currency']
      /** @example San Andres Bukid */
      address: string
      logo?: components['schemas']['ImageRequest']
    }
    MerchantsList: {
      items: components['schemas']['Merchant'][]
      paging: components['schemas']['Paging']
    }
    MerchantStatistics: {
      transactions?: components['schemas']['TransactionStatisticsList']
      redemptions?: components['schemas']['RedemptionStatisticsList']
      topSpenders?: components['schemas']['TopSpendersList']
      topVisitors?: components['schemas']['TopVisitorsList']
      meta?: components['schemas']['MerchantMetaStatistics']
    }
    MerchantMetaStatistics: {
      transactionAmount?: number
      transactionCount?: number
      redemptionQuantity?: number
      redemptionCount?: number
      redemptionPoints?: number
    }
    AdminStatistics: {
      merchantsStatus?: components['schemas']['RecordCountByStatus']
      subscriptionsStatus?: components['schemas']['RecordCountByStatus']
      rewardsStatus?: components['schemas']['RecordCountByStatus']
      transactions?: components['schemas']['TransactionStatisticsList']
      redemptions?: components['schemas']['RedemptionStatisticsList']
    }
    TransactionStatistics: {
      date?: string
      amount?: number
    }
    TransactionStatisticsList: components['schemas']['TransactionStatistics'][]
    RedemptionStatistics: {
      date?: string
      quantity?: number
      points?: number
    }
    RedemptionStatisticsList: components['schemas']['RedemptionStatistics'][]
    TopSpender: {
      customer?: components['schemas']['User']
      spent?: number
    }
    TopSpendersList: components['schemas']['TopSpender'][]
    TopVisitor: {
      customer?: components['schemas']['User']
      visits?: number
    }
    TopVisitorsList: components['schemas']['TopVisitor'][]
    RecordCountByStatus: {
      pending?: number
      active?: number
      inactive?: number
    }
    Subscription: {
      id: components['schemas']['Id']
      merchantId: components['schemas']['Id']
      status: components['schemas']['Status']
    } & WithRequired<
      components['schemas']['SubscriptionRequest'],
      'plan' | 'startDate' | 'endDate'
    >
    SubscriptionRequest: {
      plan: components['schemas']['Plan']
      startDate: components['schemas']['DateTime']
      endDate: components['schemas']['DateTime']
      amount?: components['schemas']['Amount']
    }
    SubscriptionsList: {
      items: components['schemas']['Subscription'][]
      paging: components['schemas']['Paging']
    }
    Reward: {
      id: components['schemas']['Id']
      status: components['schemas']['Status']
      merchantId?: components['schemas']['Id']
      imageUrl?: string
    } & WithRequired<
      components['schemas']['RewardRequest'],
      'name' | 'notes' | 'startDate' | 'endDate'
    >
    RewardRequest: {
      /** @example Christmas Giveaways */
      name: string
      /** @example Christmas Giveaways for Everyone */
      description?: string
      /**
       * @description Points required by the rewards
       * @default 1
       */
      requiredPoints: components['schemas']['Amount']
      /**
       * @description Maximum number of points to give away. O means unlimited.
       * @example 20
       */
      cap?: number
      notes?: string
      startDate: components['schemas']['DateTime']
      endDate: components['schemas']['DateTime']
      image?: components['schemas']['ImageRequest']
    }
    RewardsList: {
      items: components['schemas']['Reward'][]
      paging: components['schemas']['Paging']
    }
    Transaction: {
      id: components['schemas']['Id']
      /** @example ABC123 */
      reference: string
      /**
       * @description Points awarded by the merchant to the customer for this transaction
       *
       *     Formula:
       *       Math.floor(amount/basePoint)
       *     Example:
       *       Math.floor(525.560/50)
       *
       *     earnedPoints = 10
       *
       * @example 10
       */
      earnedPoints: number
      voided: boolean
      customerId: components['schemas']['Id']
      merchantId?: components['schemas']['Id']
      createdDate: string
    } & WithRequired<components['schemas']['TransactionRequest'], 'amount'>
    TransactionRequest: {
      amount: components['schemas']['Amount']
      notes?: string
    }
    TransactionCreateRequest: {
      customerId?: components['schemas']['Id']
      customerMobile?: components['schemas']['PhoneNumber']
    } & components['schemas']['TransactionRequest']
    TransactionsList: {
      items: components['schemas']['Transaction'][]
      paging: components['schemas']['Paging']
    }
    Redemption: {
      id: components['schemas']['Id']
      customerId: components['schemas']['Id']
      rewardId: components['schemas']['Id']
      merchantId?: components['schemas']['Id']
      quantity: number
      totalPoints: number
      createdDate: string
      notes?: string
    }
    RedemptionsList: {
      items: components['schemas']['Redemption'][]
      paging: components['schemas']['Paging']
    }
    CustomerReward: {
      totalEarned?: components['schemas']['Amount']
      totalRedeemed?: components['schemas']['Amount']
      balance: components['schemas']['Amount']
    } & WithRequired<components['schemas']['User'], 'id'>
    CustomerRewardsList: {
      items: components['schemas']['CustomerReward'][]
      paging: components['schemas']['Paging']
    }
    /**
     * Format: int64
     * @example 100
     */
    Id: number
    /**
     * @deprecated
     * @default UNDISCLOSED
     * @example MALE
     * @enum {string}
     */
    Gender: 'MALE' | 'FEMALE' | 'UNDISCLOSED'
    /**
     * @example MERCHANT_STAFF
     * @enum {string}
     */
    Role: 'SUPER_ADMIN' | 'MERCHANT_ADMIN' | 'MERCHANT_STAFF' | 'CUSTOMER'
    /**
     * @default PENDING
     * @enum {string}
     */
    Status: 'PENDING' | 'ACTIVE' | 'INACTIVE'
    /** @enum {string} */
    UserGroup: 'admins' | 'operators' | 'customers'
    /**
     * @default asc
     * @enum {string}
     */
    SortOrder: 'asc' | 'desc'
    /** @enum {string} */
    Plan: 'FREE_TRIAL' | 'PREMIUM'
    /**
     * @default PHP
     * @enum {string}
     */
    Currency: 'PHP' | 'USD'
    /** @enum {string} */
    AgeRange:
      | 'EIGHTEEN_TWENTYFIVE'
      | 'TWENTYSIX_THIRTYFIVE'
      | 'THIRTYSIX_FORTYFIVE'
      | 'FORTYSIX_SIXTY'
      | 'SIXTYONE_OLDER'
    /** @enum {string} */
    BirthMonth:
      | 'JANUARY'
      | 'FEBRUARY'
      | 'MARCH'
      | 'APRIL'
      | 'MAY'
      | 'JUNE'
      | 'JULY'
      | 'AUGUST'
      | 'SEPTEMBER'
      | 'OCTOBER'
      | 'NOVEMBER'
      | 'DECEMBER'
    /** @enum {string} */
    RewardType: 'FREE_ITEMS' | 'DISCOUNTS' | 'FREE_SERVICES'
    /**
     * @default PENDING
     * @example PENDING
     * @enum {string}
     */
    PasswordResetStatus: 'PENDING' | 'EXPIRED' | 'PROCESSED'
    Image: {
      id?: components['schemas']['Id']
      merchantId?: components['schemas']['Id']
      rewardId?: components['schemas']['Id']
    } & components['schemas']['ImageRequest']
    ImageRequest: {
      assetId?: string
      format?: string
      folder?: string
      publicId?: string
      secureUrl?: string
    }
    /**
     * @default AMOUNT
     * @enum {string}
     */
    PointBasis: 'AMOUNT' | 'TRANSACTION'
    /**
     * @default MERCHANT_LOGO
     * @enum {string}
     */
    ImageType: 'MERCHANT_LOGO' | 'MERCHANT_IMAGE' | 'REWARD_IMAGE'
    /**
     * Format: email
     * @example john@email.com
     */
    Email: string
    /**
     * Format: double
     * @example 525.56
     */
    Amount: number
    /**
     * Format: date-time
     * @example 2017-07-21T17:32:28Z
     */
    DateTime: string
    /** @example +639175123456 */
    PhoneNumber: string
    Paging: {
      /**
       * Format: int64
       * @description Total number of resources
       * @example 300
       */
      total?: number
    }
    UploadSignData: {
      apiKey?: string
      timestamp?: number
      signature?: string
      cloudName?: string
    }
    BadRequestErrorResponse: {
      /**
       * @description Error message
       * @example Email is invalid
       */
      message?: string
      /** @example $.body.email */
      path?: string
      /** @example invalidatgmail */
      value?: string
      /** @default 400 */
      statusCode: number
    }
    UnauthorizedAccessErrorResponse: {
      /**
       * @description Error message
       * @default Unauthorized access
       */
      message: string
      /** @default 401 */
      statusCode: number
    }
    ForbiddenAccessErrorResponse: {
      /**
       * @description Error message
       * @default Forbidden access
       */
      message: string
      /** @default 403 */
      statusCode: number
    }
    NotFoundErrorResponse: {
      /**
       * @description Error message
       * @example Username not found
       */
      message?: string
      /** @example $.query.userId */
      path?: string
      /** @example 12345 */
      value?: string
      /** @default 404 */
      statusCode: number
    }
    UnexpectedErrorResponse: {
      /**
       * @description Error message
       * @default Internal server error
       */
      message: string
      /** @default 500 */
      statusCode: number
    }
  }
  responses: {
    /** @description Created */
    CreatedResponse: {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description No content */
    NoContentResponse: {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description Unprocessable entity */
    BadRequestError: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['BadRequestErrorResponse']
      }
    }
    /** @description Unauthorized access */
    UnauthorizedError: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['UnauthorizedAccessErrorResponse']
      }
    }
    /** @description Forbidden access */
    ForbiddenAccessError: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['ForbiddenAccessErrorResponse']
      }
    }
    /** @description Resource not found */
    NotFoundError: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['NotFoundErrorResponse']
      }
    }
    /** @description Indicates error on the server side */
    UnexpectedError: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['UnexpectedErrorResponse']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  retrieveApiHealth: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful checks */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @default OK */
            status: string
          }
        }
      }
    }
  }
  login: {
    parameters: {
      query?: never
      header: {
        /** @description The role of user who's allowed to access the application, in csv format. */
        'X-Authorized-Roles': string
      }
      path?: never
      cookie?: never
    }
    /** @description Login with user credentials */
    requestBody?: {
      content: {
        'application/json': {
          /** @example test@pitaku.ph */
          username: string
          /** @example ****** */
          password: string
        }
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuthToken']
        }
      }
      401: components['responses']['UnauthorizedError']
      500: components['responses']['UnexpectedError']
    }
  }
  logout: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
    }
  }
  requestResetPassword: {
    parameters: {
      query?: never
      header: {
        /** @description Where the password request reset is requested from */
        'X-Requested-From': components['schemas']['RequestedFrom']
      }
      path?: never
      cookie?: never
    }
    /** @description Request reset of password for user */
    requestBody?: {
      content: {
        'application/json': {
          email: components['schemas']['Email']
        }
      }
    }
    responses: {
      204: components['responses']['NoContentResponse']
    }
  }
  resetPassword: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Reset password for the user */
    requestBody?: {
      content: {
        'application/json': {
          email: components['schemas']['Email']
          password: components['schemas']['Password']
          confirmPassword: components['schemas']['Password']
          token: string
        }
      }
    }
    responses: {
      204: components['responses']['NoContentResponse']
    }
  }
  retrieveUploadSignature: {
    parameters: {
      query: {
        /** @description The folder where to upload the image. */
        folder: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UploadSignData']
        }
      }
      401: components['responses']['UnauthorizedError']
      500: components['responses']['UnexpectedError']
    }
  }
  me: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      401: components['responses']['UnauthorizedError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveUsers: {
    parameters: {
      query?: {
        /** @description Page number */
        pageNumber?: number
        /** @description Page size */
        pageSize?: number
        /** @description Defines the field on which to sort. */
        sort?: string
        /** @description Defines the sorting order. */
        order?: components['schemas']['SortOrder']
        /** @description Search user by keyword */
        q?: string
        /** @description Array of ids to retrieve, comma-seperated */
        ids?: string
      }
      header?: never
      path: {
        /** @description The group of the user. */
        userGroup: components['schemas']['UserGroup']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UsersList']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  createUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The group of the user. */
        userGroup: components['schemas']['UserGroup']
      }
      cookie?: never
    }
    /** @description User object */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserCreateOrUpdateRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The group of the user. */
        userGroup: components['schemas']['UserGroup']
        /** @description The id of the user. */
        userId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  updateUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The group of the user. */
        userGroup: components['schemas']['UserGroup']
        /** @description Uid of the user to be updated. */
        userId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Update an existent user */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserCreateOrUpdateRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  activateUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The group of the user. */
        userGroup: components['schemas']['UserGroup']
        /** @description The id of the user. */
        userId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  resendUserWelcomeEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The group of the user. */
        userGroup: components['schemas']['UserGroup']
        /** @description The id of the user. */
        userId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  deactivateUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The group of the user. */
        userGroup: components['schemas']['UserGroup']
        /** @description The id of the user. */
        userId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchants: {
    parameters: {
      query?: {
        /** @description Page number */
        pageNumber?: number
        /** @description Page size */
        pageSize?: number
        /** @description Defines the field on which to sort. */
        sort?: string
        /** @description Defines the sorting order. */
        order?: components['schemas']['SortOrder']
        /** @description Search merchant by keyword */
        q?: string
        /** @description Array of ids to retrieve, comma-seperated */
        ids?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MerchantsList']
        }
      }
      401: components['responses']['UnauthorizedError']
      500: components['responses']['UnexpectedError']
    }
  }
  createMerchant: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Merchant request object */
    requestBody?: {
      content: {
        'application/json': components['schemas']['MerchantRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Merchant']
        }
      }
      401: components['responses']['UnauthorizedError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchant: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Id of the merchant to be retrieved */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Merchant']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  updateMerchant: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Id of the merchant to be updated */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Update an existent merchant */
    requestBody?: {
      content: {
        'application/json': components['schemas']['MerchantRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Merchant']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  deactivateMerchant: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  activateMerchant: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  resendMerchantWelcomeEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantOperators: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Id of the merchant to be retrieved */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UsersList']
        }
      }
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  createMerchantOperator: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Create merchant operator */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserCreateOrUpdateRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantOperator: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the user. */
        userId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  updateMerchantOperator: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the operator. */
        userId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Update an existent user */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserCreateOrUpdateRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  deactivateMerchantOperator: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the user. */
        userId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  activateMerchantOperator: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the operator. */
        userId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantSubscriptions: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubscriptionsList']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  createMerchantSubscription: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Subscription details */
    requestBody?: {
      content: {
        'application/json': components['schemas']['SubscriptionRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Subscription']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantSubscription: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the merchant. */
        subscriptionId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Subscription']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  updateMerchantSubscription: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the subscription. */
        subscriptionId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Subscription details */
    requestBody?: {
      content: {
        'application/json': components['schemas']['SubscriptionRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Subscription']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  deactivateMerchantSubscription: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the subscription. */
        subscriptionId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  activateMerchantSubscription: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the subscription. */
        subscriptionId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantRewards: {
    parameters: {
      query?: {
        /** @description Filter the results by only active rewards, that is, ACTIVE and current Date within start/end Date */
        active?: boolean
        /** @description Array of ids to retrieve, comma-seperated */
        ids?: string
      }
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RewardsList']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  createMerchantReward: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Reward request object */
    requestBody?: {
      content: {
        'application/json': components['schemas']['RewardRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Reward']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantReward: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the reward. */
        rewardId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Reward']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  updateMerchantReward: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the reward. */
        rewardId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Reward request object */
    requestBody?: {
      content: {
        'application/json': components['schemas']['RewardRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Reward']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  deactivateMerchantReward: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the reward. */
        rewardId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  activateMerchantReward: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the reward. */
        rewardId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantTransactions: {
    parameters: {
      query?: {
        /** @description Page number */
        pageNumber?: number
        /** @description Page size */
        pageSize?: number
        /** @description Defines the field on which to sort. */
        sort?: string
        /** @description Defines the sorting order. */
        order?: components['schemas']['SortOrder']
        /** @description Search user by keyword */
        q?: string
      }
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TransactionsList']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  createMerchantTransaction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Transaction details */
    requestBody?: {
      content: {
        'application/json': components['schemas']['TransactionCreateRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Transaction']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantTransaction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the transaction. */
        transactionId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Transaction']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  voidMerchantTransaction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the transaction. */
        transactionId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantRedemptions: {
    parameters: {
      query?: {
        /** @description Page number */
        pageNumber?: number
        /** @description Page size */
        pageSize?: number
        /** @description Defines the field on which to sort. */
        sort?: string
        /** @description Defines the sorting order. */
        order?: components['schemas']['SortOrder']
        /** @description Search user by keyword */
        q?: string
      }
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RedemptionsList']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  redeemCustomerReward: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Redemption details */
    requestBody?: {
      content: {
        'application/json': {
          /**
           * Format: double
           * @default 1
           */
          quantity: number
          rewardId: components['schemas']['Id']
          customerId: components['schemas']['Id']
          notes?: string
        }
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Redemption']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantRedemption: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the redemptionId. */
        redemptionId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Redemption']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantCustomers: {
    parameters: {
      query?: {
        /** @description Page number */
        pageNumber?: number
        /** @description Page size */
        pageSize?: number
        /** @description Defines the field on which to sort. */
        sort?: string
        /** @description Defines the sorting order. */
        order?: components['schemas']['SortOrder']
        /** @description Search by keyword */
        q?: string
      }
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CustomerRewardsList']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  createMerchantCustomer: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description User object */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserCreateOrUpdateRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantCustomer: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the customer. */
        customerId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CustomerReward']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  updateMerchantCustomer: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
        /** @description The id of the customer. */
        customerId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description User object */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserCreateOrUpdateRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveMerchantStatistics: {
    parameters: {
      query?: {
        /** @description Number of days to cover in the query, Defaults to 7 days */
        days?: number
      }
      header?: never
      path: {
        /** @description The id of the merchant. */
        merchantId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MerchantStatistics']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveSubscriptions: {
    parameters: {
      query?: {
        /** @description Page number */
        pageNumber?: number
        /** @description Page size */
        pageSize?: number
        /** @description Defines the field on which to sort. */
        sort?: string
        /** @description Defines the sorting order. */
        order?: components['schemas']['SortOrder']
        /** @description Search by keyword */
        q?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubscriptionsList']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  createSubscription: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Subscription details */
    requestBody?: {
      content: {
        'application/json': {
          merchantId?: components['schemas']['Id']
        } & components['schemas']['SubscriptionRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Subscription']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveSubscription: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the subscription. */
        subscriptionId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Subscription']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  updateSubscription: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the subscription. */
        subscriptionId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Subscription details */
    requestBody?: {
      content: {
        'application/json': {
          merchantId?: components['schemas']['Id']
        } & components['schemas']['SubscriptionRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Subscription']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  deactivateSubscription: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the subscription. */
        subscriptionId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Merchant info */
    requestBody?: {
      content: {
        'application/json': {
          merchantId: components['schemas']['Id']
        }
      }
    }
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  activateSubscription: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the subscription. */
        subscriptionId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Merchant info */
    requestBody?: {
      content: {
        'application/json': {
          merchantId: components['schemas']['Id']
        }
      }
    }
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveRewards: {
    parameters: {
      query?: {
        /** @description Page number */
        pageNumber?: number
        /** @description Page size */
        pageSize?: number
        /** @description Defines the field on which to sort. */
        sort?: string
        /** @description Defines the sorting order. */
        order?: components['schemas']['SortOrder']
        /** @description Search user by keyword */
        q?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RewardsList']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  createReward: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Reward request object */
    requestBody?: {
      content: {
        'application/json': {
          merchantId?: components['schemas']['Id']
        } & components['schemas']['RewardRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Reward']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveReward: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the reward. */
        rewardId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Reward']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  updateReward: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the reward. */
        rewardId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Reward request object */
    requestBody?: {
      content: {
        'application/json': {
          merchantId: components['schemas']['Id']
        } & components['schemas']['RewardRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Reward']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  deactivateReward: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the reward. */
        rewardId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Merchant info */
    requestBody?: {
      content: {
        'application/json': {
          merchantId: components['schemas']['Id']
        }
      }
    }
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  activateReward: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the reward. */
        rewardId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Merchant info */
    requestBody?: {
      content: {
        'application/json': {
          merchantId: components['schemas']['Id']
        }
      }
    }
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveTransactions: {
    parameters: {
      query?: {
        /** @description Page number */
        pageNumber?: number
        /** @description Page size */
        pageSize?: number
        /** @description Defines the field on which to sort. */
        sort?: string
        /** @description Defines the sorting order. */
        order?: components['schemas']['SortOrder']
        /** @description Search user by keyword */
        q?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TransactionsList']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  createTransaction: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Transaction details */
    requestBody?: {
      content: {
        'application/json': {
          merchantId: components['schemas']['Id']
        } & components['schemas']['TransactionCreateRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Transaction']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveTransaction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the transaction. */
        transactionId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Transaction']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  voidTransaction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the transaction. */
        transactionId: components['schemas']['Id']
      }
      cookie?: never
    }
    /** @description Transaction details */
    requestBody?: {
      content: {
        'application/json': {
          merchantId: components['schemas']['Id']
        }
      }
    }
    responses: {
      204: components['responses']['NoContentResponse']
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveRedemptions: {
    parameters: {
      query?: {
        /** @description Page number */
        pageNumber?: number
        /** @description Page size */
        pageSize?: number
        /** @description Defines the field on which to sort. */
        sort?: string
        /** @description Defines the sorting order. */
        order?: components['schemas']['SortOrder']
        /** @description Search user by keyword */
        q?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RedemptionsList']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  redeemReward: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Redemption details */
    requestBody?: {
      content: {
        'application/json': {
          /**
           * Format: double
           * @default 1
           */
          quantity: number
          rewardId: components['schemas']['Id']
          customerId: components['schemas']['Id']
          merchantId: components['schemas']['Id']
          notes?: string
        }
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Redemption']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveRedemption: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the redemptionId. */
        redemptionId: components['schemas']['Id']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Redemption']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrieveStatistics: {
    parameters: {
      query?: {
        /** @description Number of days to cover in the query, Defaults to 7 days */
        days?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdminStatistics']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrievePublishedPosts: {
    parameters: {
      query?: {
        /** @description Page number */
        pageNumber?: number
        /** @description Page size */
        pageSize?: number
        /** @description Defines the field on which to sort. */
        sort?: string
        /** @description Defines the sorting order. */
        order?: components['schemas']['SortOrder']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostsList']
        }
      }
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrievePosts: {
    parameters: {
      query?: {
        /** @description Page number */
        pageNumber?: number
        /** @description Page size */
        pageSize?: number
        /** @description Defines the field on which to sort. */
        sort?: string
        /** @description Defines the sorting order. */
        order?: components['schemas']['SortOrder']
        /** @description If present, results will be filtered by status */
        status?: components['schemas']['PostStatus']
        /** @description Search posts by keyword */
        q?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostsList']
        }
      }
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  createPost: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Post body */
    requestBody?: {
      content: {
        'application/json': components['schemas']['PostRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Post']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  retrievePost: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id or slug of the post. */
        postIdOrSlug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Post']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  updatePost: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id or slug of the post. */
        postIdOrSlug: string
      }
      cookie?: never
    }
    /** @description Update an existent post */
    requestBody?: {
      content: {
        'application/json': components['schemas']['PostRequest']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Post']
        }
      }
      400: components['responses']['BadRequestError']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  publishPost: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id or slug of the post. */
        postIdOrSlug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
  unPublishPost: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id or slug of the post. */
        postIdOrSlug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContentResponse']
      401: components['responses']['UnauthorizedError']
      404: components['responses']['NotFoundError']
      500: components['responses']['UnexpectedError']
    }
  }
}
type WithRequired<T, K extends keyof T> = T & {
  [P in K]-?: T[P]
}
